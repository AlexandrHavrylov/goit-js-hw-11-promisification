{"version":3,"sources":["index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logg","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","logger","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":";AAQA,MAAMA,EAAQC,GACL,IAAIC,QAASC,IACrBC,WAAW,KACVD,EAASF,IACJA,KAKDI,EAAOC,GAAQC,QAAQC,sBAAsBF,OAEnDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAUjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,KAM1BC,OALc,IAAId,QAASC,GAChCA,EACEW,EAASG,IAAIC,GAAQA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,MAMlFC,EAASH,GAAgBT,QAAQa,MAAMJ,GAW7CH,EAAgBH,EAAO,SAASD,KAAKU,GACrCN,EAAgBH,EAAO,OAAOD,KAAKU,GAclC,MAAME,EAA4B,CAACC,EAAKC,IAChCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAmBC,IACjB5B,MAAAA,EAAQqB,EAA0B,IAAK,KAEtC,OAAA,IAAInB,QAAQ,CAACC,EAAS0B,KAC7BzB,WAAW,KACUoB,KAAKE,SAAW,IAGpCvB,EAAQyB,EAAYE,GAAI9B,GAErB6B,EAAOD,EAAYE,KAEpB9B,MAIC+B,EAAa,CAACD,EAAIxB,KACtBC,QAAQC,mBAAmBsB,kBAAmBxB,QAG1C0B,EAAWF,IACfvB,QAAQ0B,qCAAqCH,+BAa/CH,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAC/BzB,KAAKsB,GACLI,MAAMH,GAETL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAC/BzB,KAAKsB,GACLI,MAAMH,GAETL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,KAC/BzB,KAAKsB,GACLI,MAAMH,GAETL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAC/BzB,KAAKsB,GACLI,MAAMH","file":"src.6574e9bf.js","sourceRoot":"../src","sourcesContent":["/* ЗАДАНИЕ 1\n\nНапиши функцию delay(ms), которая возвращает промис, \nпереходящий в состояние \"resolved\" через ms миллисекунд.\n Значением исполнившегося промиса должно быть\n то кол-во миллисекунд которое передали во время вызова функции delay.*/\n\n\nconst delay = ms => {\n  return new Promise((resolve) => {\n setTimeout(() => {\n  resolve (ms)\n    }, ms)\n\n  })\n   \n}\nconst logg = time => console.log(`Resolved after ${time}ms`);\n// Вызовы функции для проверки\ndelay(2000).then(logg); // Resolved after 2000ms\ndelay(1000).then(logg); // Resolved after 1000ms\ndelay(1500).then(logg); // Resolved after 1500ms\n\n\n/* ЗАДАНИЕ 2\n\nПерепиши функцию toggleUserState() так, чтобы она\n не использовала callback-функцию \ncallback, а принимала всего два параметра\n allUsers и userName и возвращала промис.*/\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  const updatedUsers = new Promise((resolve) =>\n    resolve(\n      allUsers.map(user => user.name === userName ? { ...user, active: !user.active } : user,)\n    ))\n\n  return updatedUsers\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n/*\n * Сейчас работает так\n */\n// toggleUserState(users, 'Mango', logger);\n// toggleUserState(users, 'Lux', logger);\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n\n\n\n\n\n\n/* ЗАДАНИЕ 3\n\nПерепиши функцию makeTransaction() так, чтобы она \nне использовала callback-функции onSuccess\n и onError, а принимала всего один параметр \n transaction и возвращала промис..*/\n\n const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  return new Promise((resolve, reject) => {\n  setTimeout(() => {\n    const canProcess = Math.random() > 0.3;\n\n    if (canProcess) {\n   resolve(transaction.id, delay);\n    } \n      reject(transaction.id);\n    \n  }, delay);\n})\n}   \n\nconst logSuccess = (id, time) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);\n"]}